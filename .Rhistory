seq_len(3)
seq_along(c('a', 'b', 'c'))
?nchar
formals(cat)
?cat
str(rnorm)
args(rnorm)
lm()
lm
args(lm)
str(lm)
search()
library(ggplot2)
search()
installed.packages()
View(installed.packages())
rnorm(10)
?rnorm
rnorm(10, 1, 1)
mean(rnorm(10, 1, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
mean(rnorm(10, 1))
?runif
matrix(1:4, 2, 2)
matrix(1:4, 2, 1)
matrix(1:4, 2, 3)
matrix(1:4, 2, 4)
matrix(1:4, 2, 4)[, 4]
matrix(1:4, 2, 4)[1, 4]
g(3, 10)
gl(3, 10)
?gl
gl(3)
gl(3, 1)
?split
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
split(x, gl(3, 10))
library(datasets)
View(airquality)
splitair <- split(airquality, airquality$Month)
splitair
str(splitair)
lapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
sapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")])})
sapply(splitair, function(x) {colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE)})
?interaction
?range
x <- matrix(rnorm(200), 20, 10)
x
View(x)
quantile(x[1,], probs = c(0.25, 0.75))
apply(x, 1, quantile, probs = c(0.25, 0.75))
?array
?sample
View(installed.packages())
library(ggplot2)
qplot
x <- c(-1, -0.8, -0.6, -0.4, -0.2, 0, 0.2, 0.4, 0.6, 0.8, 1)
y <- x^3
y
qplot(x, y)
qplot(y, x)
x <- c(1, 2, 2, 2, 3, 3)
qplot(x, binwidth = 1)
qplot(x)
qplot(x, binwidth = 1)
x2 <- c(1, 1, 1, 1, 1, 2, 2, 2, 2, 3, 3, 4)
qplot(x2, binwidth = 1)
??sample
?sample
?range
1:10
testlist <- 1:10
for (i in seq_along(testlist)) {
}
for (i in seq_along(testlist)) {
print(i) }
for (i in seq_len(length(testlist))) {
print(i) }
for (i in seq_len(testlist)) {
print(i) }
q()
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
library(dplyr)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
companiesData <- mutate(companiesData, margin = round((profit/margin)*100),1)
?mutate
companiesData <- mutate(companiesData, margin = (profit/margin)*100)
companiesData <- mutate(companiesData, margin = round((profit/revenue)*100, 1))
View(companiesData)
myresults <- companiesData %>% group_by(company) %>% mutate(highestMargin = max(margin), lowestMargin = min(margin))
View(myresults)
highestProfitMargins <- companiesData %>% group_by(company) %>% summarise(bestMargin = max(margin))
View(highestProfitMargins)
library(plyr)
ddply(companiesData, 'company', summarise, bestMargin = max(margin))
ddply(companiesData, 'company', function(x) {x[x$margin==max(x$margin),]})
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData$margin <- companiesData$profit/companiesData$revenue*100
View(companiesData)
companiesData$margin <- round(companiesData$profit/companiesData$revenue*100,1)
View(companiesData)
y <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
fy <- c(2010,2011,2012,2010,2011,2012,2010,2011,2012)
company <- c("Apple","Apple","Apple","Google","Google","Google","Microsoft","Microsoft","Microsoft")
revenue <- c(65225,108249,156508,29321,37905,50175,62484,69943,73723)
profit <- c(14013,25922,41733,8505,9737,10737,18760,23150,16978)
companiesData <- data.frame(fy, company, revenue, profit)
companiesData$margin <- round(companiesData$profit/companiesData$revenue*100, 1)
library(plyr)
?ddply
companiesData[order(companiesData$margin),]
?order
companiesData[order(companiesData$margin, decreasing = T),]
library(dplyr)
companiesData %>% group_by(company) %>% arrange(margin)
companiesData %>% group_by(company) %>% arrange(margin, desc)
?arrange
companiesData %>% group_by(company) %>% arrange(desc(margin), .by_group=TRUE)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
View(mergedset)
library(tidyr)
library(dplyr)
View(mergedset)
colnames(mergedset)[3]
select(mergedset, tBodyAcc-mean()-X: ,)
select(mergedset, tBodyAcc-mean()-X: )
select(mergedset, 3:563)
colnames(mergedset)[563]
longset1 <- gather(mergedset, tBodyAcc-mean()-X:angle(Z,gravityMean), key = "key", value = "measurement")
longset1 <- gather(mergedset, `tBodyAcc-mean()-X`:`angle(Z,gravityMean)`, key = "key", value = "measurement")
colnames(longset1)
rm(longset1)
load("/media/umair/F00E03AB0E0369C4/Studies/GitRepos/Getting and Cleaning Data Project/UCI HAR Dataset/.RData")
library(dplyr)
library(tidyr)
vignette()
vignette(dplyr)
vignette('dplyr')
View(mergedset)
head(select(mergedset, -(subject:activity)))
str(mergedset)
mergedset <- as_tibble(mergedset)
str(mergedset)
mergedset <- data.table::data.table(mergedset)
str(mergedset)
select(mergedset, -(subject:activity))
select(mergedset, subject:activity)
dplyr::select(mergedset, subject:activity)
names(mergedset)[1:3]
select(mergedset, subject:activity)
class(mergedset)
install.packages('swirl')
library(swirl)
library(datasets)
data("cars")
View(cars)
?cars
with(cars, plot(speed, dist))
library(lattice)
state <- data.frame(state.x77, region = state.region)
View(cars)
View(state)
state.x77
?state.x77
state.abb
xyplot(Life.Exp ~ Income | region, data = state, layout = c(4, 1))
library(ggplot2)
data("mpg")
mpgframe <- data.frame(mpg)
View(mpgframe)
xyplot(hwy ~ displ, data = mpgframe)
qplot(displ, hwy, data = mpgframe)
sample(1:6, 2, replace = FALSE)
sum(sample(1:6, 2, replace = F))
qplot(sum(sample(1:6, 2, replace = F)))
hist(sum(sample(1:6, 2, replace = F)))
hist(replicate(sum(sample(1:6, 2, replace = F))), 10000)
hist(replicate(10000, sum(sample(1:6, 2, replace = F))))
library(ggplot2)
qplot(replicate(10000, sum(sample(1:6, 2, replace = F))))
qplot(replicate(10000, sum(sample(1:6, 2, replace = F))), binwidth = 1)
rm(list = ls())
source('~/.active-rstudio-document')
rolls <- replicate(10000, roll())
qplot(rolls, binwidth = 1)
qplot(replicate(10000, sum(sample(1:6, 2, replace = T))), binwidth = 1)
library(datasets)
table(airquality$Ozone)
hist(airquality$Ozone)
q()
rm(list = ls())
example(points)
?gl
q()
?par
?plot
?points
rm(list = ls())
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot1.R')
?dirname
?parent.frame
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot1.R')
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot2.R')
?png
png(filename = "plot1.png", width = 480, height = 480, units = 'px')
hist(desired_data$Global_active_power, xlab = 'Global Active Power (kilowatts)', ylab = 'Frequency', main = 'Global Active Power', col = 'red')
# png(filename = "plot1.png", width = 480, height = 480, units = 'px')
hist(desired_data$Global_active_power, xlab = 'Global Active Power (kilowatts)', ylab = 'Frequency', main = 'Global Active Power', col = 'red')
dev.cur()
dev.set(2)
dev.cur()
dev.list()
dev.off
dev.off()
dev.cur()
dev.off()
dev.off()
# png(filename = "plot1.png", width = 480, height = 480, units = 'px')
hist(desired_data$Global_active_power, xlab = 'Global Active Power (kilowatts)', ylab = 'Frequency', main = 'Global Active Power', col = 'red')
png(filename = "plot1.png", width = 480, height = 480, units = 'px')
hist(desired_data$Global_active_power, xlab = 'Global Active Power (kilowatts)', ylab = 'Frequency', main = 'Global Active Power', col = 'red')
rm(list = ls())
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot1.R')
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot2.R')
dev.off()
dev.off()
dev.off()
dev.off()
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot1.R')
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot2.R')
View(desired_data)
rm(list = ls())
source('~/.active-rstudio-document')
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot3.R')
points(desired_data$DateTime, desired_data$Sub_metering_1, type = 'l')
points(desired_data$DateTime, desired_data$Sub_metering_2, type = 'l', col = 'red')
points(desired_data$DateTime, desired_data$Sub_metering_3, type = 'l', col = 'purple')
# png(filename = "plot2.png", width = 480, height = 480, units = 'px')
with(desired_data, plot(DateTime, Sub_metering_1, type = 'n', ylab = 'Energy sub metering', xlab = ''))
points(desired_data$DateTime, desired_data$Sub_metering_1, type = 'l')
points(desired_data$DateTime, desired_data$Sub_metering_2, type = 'l', col = 'red')
points(desired_data$DateTime, desired_data$Sub_metering_3, type = 'l', col = 'purple')
?legend
legend(topright, lty = '1', legend = 'Sub_metering_1', col = 'black')
legend('topright', lty = '1', legend = 'Sub_metering_1', col = 'black')
legend('topright', lty = '2', legend = 'Sub_metering_1', col = 'black')
legend('topright', lty = 2, legend = 'Sub_metering_1', col = 'black')
legend('topright', lty = 1, legend = 'Sub_metering_1', col = 'black')
legend('topright', lty = 1, legend = 'Sub_metering_2', col = 'red')
legend('topright', lty = c(1, 1, 1), legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), col = c('black', 'red', 'purple')
)
legend('topright', lty = c(1, 1, 1), legend = c('Sub_metering_1 ', 'Sub_metering_2 ', 'Sub_metering_3 '), col = c('black', 'red', 'purple'))
rm(list = ls())
source('/media/umair/F00E03AB0E0369C4/Studies/GitRepos/ExData_Plotting1/plot3.R')
png(filename = "plot2.png", width = 480, height = 480, units = 'px')
with(desired_data, plot(DateTime, Global_active_power, type = 'l', ylab = 'Global Active Power (kilowatts)', xlab = ''))
dev.off()
png(filename = "plot3.png", width = 480, height = 480, units = 'px')
png(filename = "plot3.png", width = 480, height = 480, units = 'px')
with(desired_data, plot(DateTime, Sub_metering_1, type = 'n', ylab = 'Energy sub metering', xlab = ''))
points(desired_data$DateTime, desired_data$Sub_metering_1, type = 'l')
points(desired_data$DateTime, desired_data$Sub_metering_2, type = 'l', col = 'red')
points(desired_data$DateTime, desired_data$Sub_metering_3, type = 'l', col = 'purple')
legend('topright', lty = c(1, 1, 1), legend = c('Sub_metering_1', 'Sub_metering_2', 'Sub_metering_3'), col = c('black', 'red', 'purple'))
dev.off()
q()
